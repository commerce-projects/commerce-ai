name: Deploy Documentation to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: '22'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Generate Documentation
        run: ./gradlew generateDocs
        
      - name: Create index page
        run: |
          mkdir -p docs-site
          cat > docs-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>SC - AI Chatbot CLI Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      line-height: 1.6;
                      color: #333;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                      padding-bottom: 20px;
                      border-bottom: 2px solid #eee;
                  }
                  .nav-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .nav-card {
                      border: 1px solid #ddd;
                      border-radius: 8px;
                      padding: 20px;
                      text-decoration: none;
                      color: inherit;
                      transition: all 0.3s ease;
                  }
                  .nav-card:hover {
                      border-color: #007acc;
                      box-shadow: 0 4px 12px rgba(0, 122, 204, 0.15);
                      transform: translateY(-2px);
                  }
                  .nav-card h3 {
                      margin: 0 0 10px 0;
                      color: #007acc;
                  }
                  .nav-card p {
                      margin: 0;
                      color: #666;
                      font-size: 14px;
                  }
                  .footer {
                      margin-top: 40px;
                      padding-top: 20px;
                      border-top: 1px solid #eee;
                      text-align: center;
                      color: #666;
                      font-size: 14px;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>SC - AI Chatbot CLI</h1>
                  <p>Command Line Documentation</p>
              </div>
              
              <div class="nav-grid">
                  <a href="sc.html" class="nav-card">
                      <h3>sc</h3>
                      <p>Main command - A runtime for AI chatbots</p>
                  </a>
                  
                  <a href="sc-chat.html" class="nav-card">
                      <h3>sc chat</h3>
                      <p>Chat with a bot using various LLM models</p>
                  </a>
                  
                  <a href="sc-config.html" class="nav-card">
                      <h3>sc config</h3>
                      <p>Manage configuration settings</p>
                  </a>
                  
                  <a href="sc-rag.html" class="nav-card">
                      <h3>sc rag</h3>
                      <p>Retrieval Augmented Generation operations</p>
                  </a>
                  
                  <a href="sc-help.html" class="nav-card">
                      <h3>sc help</h3>
                      <p>Get help for any command</p>
                  </a>
                  
                  <a href="schemas/schema.json" class="nav-card">
                      <h3>Configuration Schema</h3>
                      <p>JSON Schema for SC configuration files</p>
                  </a>
              </div>
              
              <div class="footer">
                  <p>Generated from picocli command annotations</p>
                  <p><small>Schema available at: <a href="schemas/schema.json">schemas/schema.json</a></small></p>
              </div>
          </body>
          </html>
          EOF
          
      - name: Copy documentation
        run: |
          cp build/docs/*.html docs-site/
          
      - name: Copy schema files
        run: |
          mkdir -p docs-site/schemas
          cp .sc/schema.json docs-site/schemas/schema.json
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs-site'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
